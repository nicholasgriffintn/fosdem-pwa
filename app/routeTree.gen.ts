/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as BookmarksImport } from './routes/bookmarks'
import { Route as IndexImport } from './routes/index'
import { Route as TypeSlugImport } from './routes/type/$slug'
import { Route as TrackSlugImport } from './routes/track/$slug'
import { Route as EventTestLiveImport } from './routes/event/test-live'
import { Route as EventSlugImport } from './routes/event/$slug'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const BookmarksRoute = BookmarksImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TypeSlugRoute = TypeSlugImport.update({
  id: '/type/$slug',
  path: '/type/$slug',
  getParentRoute: () => rootRoute,
} as any)

const TrackSlugRoute = TrackSlugImport.update({
  id: '/track/$slug',
  path: '/track/$slug',
  getParentRoute: () => rootRoute,
} as any)

const EventTestLiveRoute = EventTestLiveImport.update({
  id: '/event/test-live',
  path: '/event/test-live',
  getParentRoute: () => rootRoute,
} as any)

const EventSlugRoute = EventSlugImport.update({
  id: '/event/$slug',
  path: '/event/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bookmarks': {
      id: '/bookmarks'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/event/$slug': {
      id: '/event/$slug'
      path: '/event/$slug'
      fullPath: '/event/$slug'
      preLoaderRoute: typeof EventSlugImport
      parentRoute: typeof rootRoute
    }
    '/event/test-live': {
      id: '/event/test-live'
      path: '/event/test-live'
      fullPath: '/event/test-live'
      preLoaderRoute: typeof EventTestLiveImport
      parentRoute: typeof rootRoute
    }
    '/track/$slug': {
      id: '/track/$slug'
      path: '/track/$slug'
      fullPath: '/track/$slug'
      preLoaderRoute: typeof TrackSlugImport
      parentRoute: typeof rootRoute
    }
    '/type/$slug': {
      id: '/type/$slug'
      path: '/type/$slug'
      fullPath: '/type/$slug'
      preLoaderRoute: typeof TypeSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookmarks': typeof BookmarksRoute
  '/signin': typeof SigninRoute
  '/event/$slug': typeof EventSlugRoute
  '/event/test-live': typeof EventTestLiveRoute
  '/track/$slug': typeof TrackSlugRoute
  '/type/$slug': typeof TypeSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookmarks': typeof BookmarksRoute
  '/signin': typeof SigninRoute
  '/event/$slug': typeof EventSlugRoute
  '/event/test-live': typeof EventTestLiveRoute
  '/track/$slug': typeof TrackSlugRoute
  '/type/$slug': typeof TypeSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/bookmarks': typeof BookmarksRoute
  '/signin': typeof SigninRoute
  '/event/$slug': typeof EventSlugRoute
  '/event/test-live': typeof EventTestLiveRoute
  '/track/$slug': typeof TrackSlugRoute
  '/type/$slug': typeof TypeSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookmarks'
    | '/signin'
    | '/event/$slug'
    | '/event/test-live'
    | '/track/$slug'
    | '/type/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bookmarks'
    | '/signin'
    | '/event/$slug'
    | '/event/test-live'
    | '/track/$slug'
    | '/type/$slug'
  id:
    | '__root__'
    | '/'
    | '/bookmarks'
    | '/signin'
    | '/event/$slug'
    | '/event/test-live'
    | '/track/$slug'
    | '/type/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookmarksRoute: typeof BookmarksRoute
  SigninRoute: typeof SigninRoute
  EventSlugRoute: typeof EventSlugRoute
  EventTestLiveRoute: typeof EventTestLiveRoute
  TrackSlugRoute: typeof TrackSlugRoute
  TypeSlugRoute: typeof TypeSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookmarksRoute: BookmarksRoute,
  SigninRoute: SigninRoute,
  EventSlugRoute: EventSlugRoute,
  EventTestLiveRoute: EventTestLiveRoute,
  TrackSlugRoute: TrackSlugRoute,
  TypeSlugRoute: TypeSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bookmarks",
        "/signin",
        "/event/$slug",
        "/event/test-live",
        "/track/$slug",
        "/type/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bookmarks": {
      "filePath": "bookmarks.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/event/$slug": {
      "filePath": "event/$slug.tsx"
    },
    "/event/test-live": {
      "filePath": "event/test-live.tsx"
    },
    "/track/$slug": {
      "filePath": "track/$slug.tsx"
    },
    "/type/$slug": {
      "filePath": "type/$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
